import java.sql.Array;
import java.util.Scanner ;
import java.io.*;
import java.lang.*;
import java.util.*;
/* 
Code for Miminum spaning tree for a weighted undirected graph using Kruskals alogirthm */
class KruskalsMST{
    static class Edge{
        int src, dest, weight;
        public Edge(int src, int dest, int weight){
            this.src = src;
            this.dest = dest;
            this.weight = weight;
        }
    }
    static class Sets{
        int parent, rank;

        public Sets(int p, int r){
            this.parent = p;
            this.rank = r;
        }
    }
    static  int findRoot(Sets[] sets, int i){
        if(sets[i].parent == i){
            return  sets[i].parent;
        }
        sets[i].parent = findRoot(sets, sets[i].parent);
        return sets[i].parent;
    }
    static void union(Sets[] sets, int x, int y){
        int rootX = findRoot(sets, x);
        int rootY = findRoot(sets,y);
        if(sets[rootY].rank < sets[rootX].rank){
            sets[rootY].parent = rootX;
        }else if(sets[rootX].rank < sets[rootY].rank){
            sets[rootX].parent = rootY;
        }else{
            sets[rootY].parent = rootX;
            sets[rootX].rank++;
        }
    }
    static int kruskals(int V, List<Edge> edges){
        int j = 0;
        int E = 0;

        Sets sets[] = new Sets[V];

        Edge results[] = new Edge[V];

        for(int i = 0; i < V; i++){
            sets[i] = new Sets(i, 0);
        }

        while(E < V - 1){
            Edge nextEdge = edges.get(j);
            int x = findRoot(sets, nextEdge.src);
            int y = findRoot(sets, nextEdge.dest);

            if(x != y){
                results[E] = nextEdge;
                union(sets, x, y);
                E++;
            }

            j++;
        }
        int min = 0;
        for(int i = 0; i < E; i++){
            min += results[i].weight;
        }
        return min;
    }
}
//class Graph{
//    int V, E;
//    Edge edge[];
//
//    Graph(int v, int e){
//        V = v; //num of vertices
//        E = e; //num of edges
//        edge = new Edge[E];
//        for(int i = 0; i < e; i++){
//            edge[i] = new Edge();
//        }
//    }
//    int find(int parent[], int i){
//        if(parent[i] == i){
//            return i;
//        }
//        return find(parent, parent[i]);
//    }
//    void Union(int parent[], int x, int y){
//        parent[x] = y;
//    }
//    boolean isCycle(Graph graph){
//        int parent[] = new int[graph.V];
//        for(int i = 0; i < graph.V; i++){
//            parent[i] = i;
//        }
//        for(int i = 0; i < graph.E; i++){
//            int x = graph.find(parent, graph.edge[i].src);
//            int y = graph.find(parent, graph.edge[i].dest);
//
//            if(x == y){
//                return true;
//            }
//
//            graph.Union(parent, x, y);
//        }
//        return false;
//    }
//
//    public String toString(){
//        String res = "";
//        for(int i = 0; i < E; i++){
//            res += edge[i] + " ";
//        }
//        return res;
//    }
//}

public class test {

    public static void main(String args[]) {
        int V = 4;
        List<KruskalsMST.Edge> graphEdges = new ArrayList<KruskalsMST.Edge>();
        graphEdges.add(new KruskalsMST.Edge(1, 2, 5));
        graphEdges.add(new KruskalsMST.Edge(1, 3, 3));
        graphEdges.add(new KruskalsMST.Edge(4, 1, 6));
        graphEdges.add(new KruskalsMST.Edge(2, 4, 7));
        graphEdges.add(new KruskalsMST.Edge(3, 2, 4));
        graphEdges.add(new KruskalsMST.Edge(3, 4, 5));

        graphEdges.sort(new Comparator<KruskalsMST.Edge>() {
            @Override
            public int compare(KruskalsMST.Edge o1, KruskalsMST.Edge o2) {
                return o1.weight - o2.weight;
            }
        });
        int res = KruskalsMST.kruskals(V, graphEdges);
        System.out.println(res);
    }

}
